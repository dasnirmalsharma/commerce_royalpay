<?php
/**
 * @file
 * @author Guotong Zheng (Tony)
 * @website http://visionsoft.com.au
 * Implements Royal Pay payment services for use with Drupal Commerce
 */

 /**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_royalpay_commerce_payment_method_info() {
    $payment_methods = array();

    // Declare Alipay payment method to redirect to external site.
    $payment_methods['royal_pay'] = array(
        'base' => 'commerce_royalpay',
        'title' => t('Royal Pay'),
        'terminal' => FALSE,
        'offsite' => TRUE,
        'offsite_autoredirect' => TRUE,
    );

    return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_royalpay_settings_form($settings = NULL) {
    $form = array();

    $settings = (array) $settings + array(
            'service' => 'QRCode',
            'partner' => '',
            'key' => '',
            'debug' => '',
        );
    // Declare form settings to configure the Royal pay payment method.
    $form['service'] = array(
        '#type' => 'select',
        '#title' => t('Payment service type'),
        '#prefix' => t('Configure Royalpay payment settings below with the corresponding account information.'),
        '#description' => t('Select the type of service provided by Royalpay to process payments.<br/><strong>Currently only Instant Payment is fully supported.</strong>'),
        '#default_value' => $settings['service'],
        '#options' => array(
            'qrcode_payment' => t('QR Code Payment Page in RoyalPay'),
        ),
        '#required' => TRUE,
    );


    $form['partner_code'] = array(
        '#type' => 'textfield',
        '#title' => t('Partner code'),
        '#description' => t("Code for partner, including four uppercase letters or numbers"),
        '#default_value' => $settings['partner_code'],
        '#required' => TRUE,
    );

    $form['credential_code'] = array(
        '#type' => 'textfield',
        '#title' => t('Credential Code'),
        '#description' => t("Partner credential code for development provided by RoyalPay system"),
        '#default_value' => $settings['credential_code'],
        '#required' => TRUE,
    );

    $form['api_version'] = array(
        '#type' => 'select',
        '#title' => t('Royal Pay API Version'),
        '#description' => t("Partner credential code for development provided by RoyalPay system"),
        '#default_value' => $settings['api_version'],
        '#options' => array(
            'v1.0' => 'v1.0',
        ),
    );

    $form['currency'] = array(
        '#type' => 'select',
        '#title' => t('Select a target  foreign currency'),
        '#description' => t("RoyalPay can only accept the following currencies at the moment. Please note that the settlement currency will always be Australian Dollar"),
        '#default_value' => $settings['currency'],
        '#options' => array(
            'AUD' => t('Australian Dollar'),
            'CHY' => t('Chinese yuan'),
        ),
        '#required' => TRUE,
    );
    // Enable debug mode.
    $form['debug'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable debug mode <strong>(for development use only)</strong>'),
        '#description' => t('<strong>Override all transactions to a total of 0.01 CNY</strong> for testing the configuration and making sure that payments can be received on the correct account.<br/>This setting should only be used for development purposes.'),
        '#default_value' => $settings['debug'],
    );

    return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the payment method selection pane on Checkout to add Alipay icons.
 */
 function commerce_royalpay_form_commerce_checkout_form_alter(&$form, &$form_state)
 {
     // If this checkout form contains the payment method radios...
     if (!empty($form['commerce_payment']['payment_method']['#options'])) {
         // Loop over its options array looking for a Alipay option.
         foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
             list($method_id, $rule_name) = explode('|', $key);

             // If we find Alipay...
             if ($method_id == 'royal_pay') {
                 // Prepare the replacement radio button text with icons.
                 $icons_path = drupal_get_path('module', 'commerce_royalpay') . '/images/';

                 // Generate Alipay logo image markup.
                 $royalpay_label = t('Royalpay');
                 $royalpay_icon = theme('image', array(
                     'path' => $icons_path . 'wechat-pay.png',
                     'title' => $royalpay_label,
                     'alt' => $royalpay_label,
                     'attributes' => array('class' => 'commerce-royalpay-icon'),
                 ));

                 // Generate the aggregated markup.
                 $value = $royalpay_icon ;

                 // Add module's CSS for the custom labels styles.
                 $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_royalpay') . '/theme/commerce_royalpay.theme.css';

                 break;
             }
         }
     }
 }


 /**
 * Payment method callback: adds a message to the submission form.
 */
function commerce_royalpay_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
    $form['royalpay_information'] = array(
        '#markup' => '<span class="commerce-royalpay-info">' . t( commerce_royalpay_sign('test'). '(Continue with checkout to complete payment via wechatpay.)') . '</span>',
    );

    return $form;
}


/**
 * Payment method callback: redirect form.
 *
 * Prepares the necessary data to be passed to Alipay with the redirection.
 */
 function ommerce_royalpay_redirect_form($form, &$form_state, $order, $payment_method) {
    // Return an error if the enabled action's settings haven't been configured.
    if (empty($payment_method['settings']['partner_code'])) {
        drupal_set_message(t('Royalpay is not configured for use. No Partner code has been specified.'), 'error');
        return array();
    }
    $form = array();
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $currency_code = $wrapper->commerce_order_total->currency_code->value();

    // Override transaction amount if debug mode is enabled.
    $amount = $payment_method['settings']['debug'] ? 1 : $wrapper->commerce_order_total->amount->value();
    $amount = commerce_currency_amount_to_decimal($amount, $currency_code);

    // Set feedback URLs.
    $settings = array(
        // Return to the payment redirect page for processing successful payments.
        'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
        //'notify_url' => url('commerce_alipay_global/notify', array('absolute' => TRUE)),
    );
    $settings = $payment_method['settings'] + $settings;

    $target_currency_code =  $settings['currency'];

    // Declare the data to be provided through Alipay's API to process payment.
    $data = array(
        'service' => $settings['service'],
        'payment_type' => '1',
        'partner' => $settings['partner'],
        'seller_email' => $settings['seller_email'],
        'return_url' => $settings['return'],
        'notify_url' => $settings['notify'],
        '_input_charset' => 'UTF-8',
        'show_url' => $settings['return'],
        'out_trade_no' => $order->order_number,
        'subject' => t('order !order_id', array('!order_id' => $order->order_number)),
        //'body' => commerce_alipay_global_data_body($order),
        'body' => t('order !order_id', array('!order_id' => $order->order_number)),
        'total_fee' =>round(commerce_multicurrency_conversion($amount,$currency_code, $target_currency_code),2),
        'currency' => $target_currency_code,
        'sign_type' => 'MD5',
    );
    // Encrypted transaction signature.
    $data['sign'] = commerce_royalpay_sign($payment_method['settings']);
    foreach ($data as $name => $value) {
        if (!empty($value)) {
            $value = trim($value);
            // Add the value as a hidden form element.
            $form[$name] = array('#type' => 'hidden', '#value' => $value);
        }
    }
    // Override submit callback to redirect to Alipay's payment page.
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Proceed with payment'),
        '#submit' => array('commerce_alipay_global_redirect'),
    );
    return $form;
}

/**
 * Helper function to provide an encrypted signature to be passed to Alipay.
 */
 function commerce_royalpay_sign($settings, $sign_type = 'sha256') {

    $arg = '1ENF&1504530445&0000000001201504530445&aJha6tRp3KrhUwA8QxAB9rRKj5iSS87g';
    //Sign the valid string with SHA256 and turn to lowercase Hex string
    return strtolower( hash($sign_type,utf8_encode($arg)));
    // return strtolower(hex2bin(hash($sign_type,$arg)));
}

/**
 * Helper function to get royalpay sign random nonce string.
 */
function commerce_royalpay_get_nonce_str($orderid){
    return  str_pad($orderid,12,'0',STR_PAD_LEFT) . time ();
}
