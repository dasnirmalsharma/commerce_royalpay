<?php
/**
 * @file
 * @author Guotong Zheng (Tony)
 * @website http://visionsoft.com.au
 * Implements Royal Pay payment services for use with Drupal Commerce
 */

 require_once(drupal_get_path('module', 'commerce_royalpay') . '/includes/RoyalPay.Api.php');
 require_once(drupal_get_path('module', 'commerce_royalpay') .'/includes/RoyalPay.Exception.php');
 require_once(drupal_get_path('module', 'commerce_royalpay') . '/includes/RoyalPay.Data.php');


 /**
 * Implements hook_menu().
 */
function commerce_royalpay_menu() {
    // Add a menu callback for Alipay's notification on operation processing.
    $items['commerce_alipay_global/notify'] = array(
        'page callback' => 'commerce_royalpay_process_notify',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

 /**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_royalpay_commerce_payment_method_info() {
    $payment_methods = array();

    // Declare Alipay payment method to redirect to external site.
    $payment_methods['royal_pay'] = array(
        'base' => 'commerce_royalpay',
        'title' => t('Royal Pay'),
        'terminal' => FALSE,
        'offsite' => TRUE,
        'offsite_autoredirect' => TRUE,
    );

    return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_royalpay_settings_form($settings = NULL) {
    $form = array();

    $settings = (array) $settings + array(
            'service' => 'QRCode',
            'partner' => '',
            'key' => '',
            'debug' => '',
        );
 
    $form['partner_code'] = array(
        '#type' => 'textfield',
        '#title' => t('Partner code'),
        '#description' => t("Code for partner, including four uppercase letters or numbers"),
        '#default_value' => $settings['partner_code'],
        '#required' => TRUE,
    );
    
    $form['credential_code'] = array(
        '#type' => 'textfield',
        '#title' => t('Credential Code'),
        '#description' => t("Partner credential code for development provided by RoyalPay system"),
        '#default_value' => $settings['credential_code'],
        '#required' => TRUE,
    );

    // Enable debug mode.
    $form['debug'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable debug mode <strong>(for development use only)</strong>'),
        '#description' => t('<strong>Override all transactions to a total of 0.01 </strong> for testing the configuration and making sure that payments can be received on the correct account.<br/>This setting should only be used for development purposes.'),
        '#default_value' => $settings['debug'],
    );

    return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the payment method selection pane on Checkout to add Alipay icons.
 */
 function commerce_royalpay_form_commerce_checkout_form_alter(&$form, &$form_state)
 {
     // If this checkout form contains the payment method radios...
     if (!empty($form['commerce_payment']['payment_method']['#options'])) {
         // Loop over its options array looking for a Alipay option.
         foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
             list($method_id, $rule_name) = explode('|', $key);
 
             // If we find Alipay...
             if ($method_id == 'royal_pay') {
                 // Prepare the replacement radio button text with icons.
                 $icons_path = drupal_get_path('module', 'commerce_royalpay') . '/images/';
 
                 // Generate Alipay logo image markup.
                 $royalpay_label = t('Royalpay');
                 $royalpay_icon = theme('image', array(
                     'path' => $icons_path . 'royalpay-logo.jpeg',
                     'title' => $royalpay_label,
                     'alt' => $royalpay_label,
                     'attributes' => array('class' => 'commerce-royalpay-icon'),
                 ));
 
                 // Generate the aggregated markup.
                 $value = $royalpay_icon ;
 
                 break;
             }
         }
     }
 }


 /**
 * Payment method callback: adds a message to the submission form.
 */
function commerce_royalpay_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
    $form['royalpay_information'] = array(
        '#markup' => '<span class="commerce-royalpay-info">' . t('(Continue with checkout to complete payment via wechatpay.)') . '</span>',
    );

    return $form;
}


/**
 * Payment method callback: redirect form.
 *
 * Prepares the necessary data to be passed to Alipay with the redirection.
 */
 function commerce_royalpay_redirect_form($form, &$form_state, $order, $payment_method) {
    // Return an error if the enabled action's settings haven't been configured.
    if (empty($payment_method['settings']['partner_code'])) {
        drupal_set_message(t('Royalpay is not configured for use. No Partner code has been specified.'), 'error');
        return array();
    }
    $form = array();
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $currency_code = $wrapper->commerce_order_total->currency_code->value();

    // Override transaction amount if debug mode is enabled.
    $amount = $payment_method['settings']['debug'] ? 1 : $wrapper->commerce_order_total->amount->value();
   // $amount = commerce_currency_amount_to_decimal($amount, $currency_code);

    // Set feedback URLs.
    $settings = array(
        // Return to the payment redirect page for processing successful payments.
        'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
        //'notify_url' => url('commerce_alipay_global/notify', array('absolute' => TRUE)),
    );

    $input = new RoyalPayUnifiedOrder();
    $input->setPartnerInfo($payment_method['settings']['partner_code'],$payment_method['settings']['credential_code']);

    $input->setOrderId(commerce_royalpay_get_order_id($order->order_number));
    $input->setDescription( ' order:' . $order->order_number);
    $input->setPrice($amount);
    $input->setCurrency($currency_code);
    // $input->setNotifyUrl('');
    $input->setOperator("123456");

    $result = RoyalPayApi::qrOrder($input);

    $inputObj = new RoyalPayRedirect();
    $inputObj->setPartnerInfo($payment_method['settings']['partner_code'],$payment_method['settings']['credential_code']);
    $inputObj->setRedirect($settings['return']);

    $form['pay_url'] = array('#type' => 'hidden',
                                 '#value' => RoyalPayApi::getQRRedirectUrl($result['pay_url'], $inputObj));
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Proceed with royalpay'),
        '#submit' => array('commerce_royalpay_redirect'),
    );
    
    return $form;
}

/**
 * Menu callback function to process Royalpay's feedback notifications.
 */
 function commerce_royalpay_commerce_process_notify() {
    $response = json_decode($GLOBALS['HTTP_RAW_POST_DATA'], true);
    // Log an entry of the notification received for a transaction.
    watchdog('commerce_royalpay', 'Customer returned from Royalpay with the following data:<pre>@notify</pre>', array('@notify' => print_r($response, TRUE)));
    if(!empty($response) && !empty( $response['sign'])){

        $order_id = commerce_royalpay_get_dc_order_id($order_id);
        $order = commerce_order_load($order_id);
        $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);

        $input = new RoyalPayDataBase();
        $input->setPartnerInfo($payment_method['settings']['partner_code'],$payment_method['settings']['credential_code']);
        $input->setNonceStr($response['nonce_str']);
        $input->setTime($response['time']);
        $input->setSign();
        
        //validate royal pay sign
        if ($input->getSign() == $response['sign']) {
            commerce_royapal_notify_submit($order, $payment_method, $response);
        } 
    }
    return FALSE;
}

/**
 * Submit and process a notification feedback from Royalpay for a transaction.
 *
 * This function creates or updates payment transaction records for
 * corresponding orders depending on the status of the notifications received.
 */
 function commerce_royapal_notify_submit($order, $payment_method, $notify) {
    // Attempt to load prior authorization capture IPN created previously.
    $transactions = commerce_payment_transaction_load_multiple(array(), array('remote_id' => $notify["partner_order_id"]));
    if (!empty($transactions)) {
        // @TODO: Load the prior transaction ID and update with the capture values.
        // There is probably some special handling necessary in this case.
        $transaction = reset($transactions);
    }
    else {
        // Create a new payment transaction for the order.
        $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
        $transaction->instance_id = $payment_method['instance_id'];
    }
    $currency_code =  $notify["currency"];

    $transaction->amount =$notify['total_fee'];
    $transaction->currency_code = $currency_code;

    $transactions = commerce_payment_transaction_load_multiple(array(), array('remote_id' => $notify["partner_order_id"]));
    $transaction->remote_id = $notify["trade_no"];
    // Set the transaction's statuses based on notify's trade_status.
    $transaction->remote_status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->data['notify'] = $response;
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->message = t('The payment has completed.');
   
    // Save the payment transaction and redirect to next page.
    commerce_payment_redirect_pane_next_page($order);
    commerce_payment_transaction_save($transaction);

    //if is first  paid in full trigger is not trigger uncomment this
   // rules_invoke_all('commerce_payment_order_paid_in_full', $order, $transaction);

    // Record an entry of the transaction with the order and trade numbers.
    watchdog('commerce_alipay_global', 'Notify processed for Order @order_number with ID @trade_no.', array('@trade_no' => $notify["trade_no"], '@order_number' => $order->order_number), WATCHDOG_INFO);

    $result = array('return_code' => 'SUCCESS');
    return json_encode($result);
}


/**
 * Redirects the transaction to Alipay's payment gateway.
 */
 function commerce_royalpay_redirect($form, &$form_state) {
    // URL for directing incoming payment transaction requests.
    form_state_values_clean($form_state);
    $form_state['redirect'] =$form_state['values']['pay_url'];
  }
  

function commerce_royalpay_get_order_id($order_id){
    return str_pad($order_id,10,'0',STR_PAD_LEFT) . date('dmYhis');
}

function commerce_royalpay_get_dc_order_id($order_id){
    return (int) substr($order_id, 0, 10);
}